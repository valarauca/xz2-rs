var searchIndex = {};
searchIndex["xz2"] = {"doc":"LZMA/XZ encoding and decoding streams","items":[[0,"stream","xz2","Raw in-memory LZMA streams.",null,null],[3,"Stream","xz2::stream","Representation of an in-memory LZMA encoding or decoding stream.",null,null],[3,"LzmaOptions","","Options that can be used to configure how LZMA encoding happens.",null,null],[3,"MtStreamBuilder","","Builder to create a multi-threaded stream encoder.",null,null],[3,"Filters","","A custom chain of filters to configure an encoding stream.",null,null],[4,"Action","","The `action` argument for `process`,",null,null],[13,"Run","","Continue processing",0,null],[13,"SyncFlush","","Make all the input available at output",0,null],[13,"FullFlush","","Finish encoding of the current block.",0,null],[13,"FullBarrier","","Finish encoding of the current block.",0,null],[13,"Finish","","Finish the current operation",0,null],[4,"Status","","Return value of a `process` operation.",null,null],[13,"Ok","","Operation completed successfully.",1,null],[13,"StreamEnd","","End of stream was reached.",1,null],[13,"GetCheck","","If the TELL_ANY_CHECK flags is specified when constructing a decoder, this informs that the `check` method will now return the underlying integrity check algorithm.",1,null],[13,"MemNeeded","","An error has not been encountered, but no progress is possible.",1,null],[4,"Error","","Possible error codes that can be returned from a processing operation.",null,null],[13,"Data","","The underlying data was corrupt.",2,null],[13,"Options","","Invalid or unsupported options were specified.",2,null],[13,"Format","","File format wasn't recognized.",2,null],[13,"MemLimit","","Memory usage limit was reached.",2,null],[13,"Mem","","Memory couldn't be allocated.",2,null],[13,"Program","","A programming error was encountered.",2,null],[13,"NoCheck","","The `TELL_NO_CHECK` flag was specified and no integrity check was available for this stream.",2,null],[13,"UnsupportedCheck","","The `TELL_UNSUPPORTED_CHECK` flag was specified and no integrity check isn't implemented in this build of liblzma for this stream.",2,null],[4,"Check","","Possible integrity checks that can be part of a .xz stream.",null,null],[13,"None","","",3,null],[13,"Crc32","","",3,null],[13,"Crc64","","",3,null],[13,"Sha256","","",3,null],[4,"Mode","","Compression modes",null,null],[13,"Fast","","Fast compression.",4,null],[13,"Normal","","Normal compression.",4,null],[4,"MatchFinder","","Match finders",null,null],[13,"HashChain3","","Hash Chain with 2- and 3-byte hashing",5,null],[13,"HashChain4","","Hash Chain with 2-, 3-, and 4-byte hashing",5,null],[13,"BinaryTree2","","Binary Tree with 2-byte hashing",5,null],[13,"BinaryTree3","","Binary Tree with 2- and 3-byte hashing",5,null],[13,"BinaryTree4","","Binary Tree with 2-, 3-, and 4-byte hashing",5,null],[17,"TELL_ANY_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Status::GetCheck` as soon as the integrity check is known.",null,null],[17,"TELL_NO_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Error::NoCheck` if the stream being decoded has no integrity check.",null,null],[17,"TELL_UNSUPPORTED_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Error::UnsupportedCheck` if the stream being decoded has an integrity check that cannot be verified by this build of liblzma.",null,null],[17,"IGNORE_CHECK","","A flag passed when initializing a decoder, causes the decoder to ignore any integrity checks listed.",null,null],[17,"CONCATENATED","","A flag passed when initializing a decoder, indicates that the stream may be multiple concatenated xz files.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"check"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"matchfinder"}}],[11,"new_easy_encoder","","Initialize .xz stream encoder using a preset number",6,{"inputs":[{"name":"u32"},{"name":"check"}],"output":{"name":"result"}}],[11,"new_lzma_encoder","","Initialize .lzma encoder (legacy file format)",6,{"inputs":[{"name":"lzmaoptions"}],"output":{"name":"result"}}],[11,"new_stream_encoder","","Initialize .xz Stream encoder using a custom filter chain",6,{"inputs":[{"name":"filters"},{"name":"check"}],"output":{"name":"result"}}],[11,"new_stream_decoder","","Initialize a .xz stream decoder.",6,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"result"}}],[11,"new_lzma_decoder","","Initialize a .lzma stream decoder.",6,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"new_auto_decoder","","Initialize a decoder which will choose a stream/lzma formats depending on the input stream.",6,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"result"}}],[11,"process","","Processes some data from input into an output buffer.",6,null],[11,"process_vec","","Performs the same data as `process`, but places output data in a `Vec`.",6,null],[11,"total_in","","Returns the total amount of input bytes consumed by this stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total amount of bytes produced by this stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"memlimit","","Get the current memory usage limit.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_memlimit","","Set the current memory usage limit.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"new_preset","","Creates a new blank set of options for encoding.",7,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"dict_size","","Configures the dictionary size, in bytes",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"literal_context_bits","","Configures the number of literal context bits.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"literal_position_bits","","Configures the number of literal position bits.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"position_bits","","Configures the number of position bits.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"mode","","Configures the compression mode.",7,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"lzmaoptions"}}],[11,"nice_len","","Configures the nice length of a match.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"match_finder","","Configures the match finder ID.",7,{"inputs":[{"name":"self"},{"name":"matchfinder"}],"output":{"name":"lzmaoptions"}}],[11,"depth","","Maximum search depth in the match finder.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"is_supported","","Test if this check is supported in this build of liblzma.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_supported","","Test if this match finder is supported in this build of liblzma.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new filter chain with no filters.",8,{"inputs":[],"output":{"name":"filters"}}],[11,"lzma1","","Add an LZMA1 filter.",8,{"inputs":[{"name":"self"},{"name":"lzmaoptions"}],"output":{"name":"filters"}}],[11,"lzma2","","Add an LZMA2 filter.",8,{"inputs":[{"name":"self"},{"name":"lzmaoptions"}],"output":{"name":"filters"}}],[11,"x86","","Add a filter for x86 binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"powerpc","","Add a filter for PowerPC binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"ia64","","Add a filter for IA-64 (itanium) binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"arm","","Add a filter for ARM binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"arm_thumb","","Add a filter for ARM-Thumb binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"sparc","","Add a filter for SPARC binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"new","","Creates a new blank builder to create a multithreaded encoding `Stream`.",9,{"inputs":[],"output":{"name":"mtstreambuilder"}}],[11,"threads","","Configures the number of worker threads to use",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"block_size","","Configures the maximum uncompressed size of a block",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"timeout_ms","","Timeout to allow `process` to return early",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"preset","","Compression preset (level and possible flags)",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"filters","","Configure a custom filter chain",9,{"inputs":[{"name":"self"},{"name":"filters"}],"output":{"name":"self"}}],[11,"check","","Configures the integrity check type",9,{"inputs":[{"name":"self"},{"name":"check"}],"output":{"name":"self"}}],[11,"memusage","","Calculate approximate memory usage of multithreaded .xz encoder",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"encoder","","Initialize multithreaded .xz stream encoder.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[0,"bufread","xz2","I/O streams for wrapping `BufRead` types as encoders/decoders",null,null],[3,"XzEncoder","xz2::bufread","An xz encoder, or compressor.",null,null],[3,"XzDecoder","","A xz decoder, or decompressor.",null,null],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",10,{"inputs":[{"name":"r"},{"name":"u32"}],"output":{"name":"xzencoder"}}],[11,"new_stream","","Creates a new encoder with a custom `Stream`.",10,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",10,null],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",11,{"inputs":[{"name":"r"}],"output":{"name":"xzdecoder"}}],[11,"new_stream","","Creates a new decoder with a custom `Stream`.",11,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",11,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",11,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",11,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",11,null],[0,"read","xz2","Reader-based compression/decompression streams",null,null],[3,"XzEncoder","xz2::read","A compression stream which wraps an uncompressed stream of data. Compressed data will be read from the stream.",null,null],[3,"XzDecoder","","A decompression stream which wraps a compressed stream of data. Decompressed data will be read from the stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to read compress output to the give output stream.",12,{"inputs":[{"name":"r"},{"name":"u32"}],"output":{"name":"xzencoder"}}],[11,"new_stream","","Creates a new encoder with a custom `Stream`.",12,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"new","","Create a new decompression stream, which will read compressed data from the given input stream and decompress it.",13,{"inputs":[{"name":"r"}],"output":{"name":"xzdecoder"}}],[11,"new_stream","","Creates a new decoder with a custom `Stream`.",13,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_out","","Returns the number of bytes produced by the decompressor (e.g. the number of bytes read from this stream)",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes read from the underlying stream)",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[0,"write","xz2","Writer-based compression/decompression streams",null,null],[3,"XzEncoder","xz2::write","A compression stream which will have uncompressed data written to it and will write compressed data to an output stream.",null,null],[3,"XzDecoder","","A compression stream which will have compressed data written to it and will write uncompressed data to an output stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to write compress output to the give output stream.",14,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"xzencoder"}}],[11,"new_stream","","Create a new encoder which will use the specified `Stream` to encode (compress) data into the provided `obj`.",14,{"inputs":[{"name":"w"},{"name":"stream"}],"output":{"name":"xzencoder"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_out","","Returns the number of bytes produced by the compressor",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes written to this stream.)",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new decoding stream which will decode all input written to it into `obj`.",15,{"inputs":[{"name":"w"}],"output":{"name":"xzdecoder"}}],[11,"new_stream","","Creates a new decoding stream which will decode all input written to it into `obj`.",15,{"inputs":[{"name":"w"},{"name":"stream"}],"output":{"name":"xzdecoder"}}],[11,"finish","","Unwrap the underlying writer, finishing the compression stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_out","","Returns the number of bytes produced by the decompressor",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes written to this stream.)",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"Action"],[4,"Status"],[4,"Error"],[4,"Check"],[4,"Mode"],[4,"MatchFinder"],[3,"Stream"],[3,"LzmaOptions"],[3,"Filters"],[3,"MtStreamBuilder"],[3,"XzEncoder"],[3,"XzDecoder"],[3,"XzEncoder"],[3,"XzDecoder"],[3,"XzEncoder"],[3,"XzDecoder"]]};
initSearch(searchIndex);
